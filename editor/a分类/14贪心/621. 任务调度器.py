question_content = """
Áªô‰Ω†‰∏Ä‰∏™Áî®Â≠óÁ¨¶Êï∞ÁªÑ tasks Ë°®Á§∫ÁöÑ CPU ÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®„ÄÇÂÖ∂‰∏≠ÊØè‰∏™Â≠óÊØçË°®Á§∫‰∏ÄÁßç‰∏çÂêåÁßçÁ±ªÁöÑ‰ªªÂä°„ÄÇ‰ªªÂä°ÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÊâßË°åÔºåÂπ∂‰∏îÊØè‰∏™‰ªªÂä°ÈÉΩÂèØ‰ª•Âú® 1 ‰∏™Âçï‰Ωç
Êó∂Èó¥ÂÜÖÊâßË°åÂÆå„ÄÇÂú®‰ªª‰Ωï‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåCPU ÂèØ‰ª•ÂÆåÊàê‰∏Ä‰∏™‰ªªÂä°ÔºåÊàñËÄÖÂ§Ñ‰∫éÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ 

 ÁÑ∂ËÄåÔºå‰∏§‰∏™ Áõ∏ÂêåÁßçÁ±ª ÁöÑ‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÊúâÈïøÂ∫¶‰∏∫Êï¥Êï∞ n ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåÂõ†Ê≠§Ëá≥Â∞ëÊúâËøûÁª≠ n ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖ CPU Âú®ÊâßË°å‰∏çÂêåÁöÑ‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ 

 ‰Ω†ÈúÄË¶ÅËÆ°ÁÆóÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÊâÄÈúÄË¶ÅÁöÑ ÊúÄÁü≠Êó∂Èó¥ „ÄÇ 

 

 Á§∫‰æã 1Ôºö 
ÊµãËØïÁî®‰æã:["A","A","A","B","B","B"]
			2
ÊúüÊúõÁªìÊûú:8
 
# ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 2
# ËæìÂá∫Ôºö8
Ëß£ÈáäÔºöA -> B -> (ÂæÖÂëΩ) -> A -> B -> (ÂæÖÂëΩ) -> A -> B
     Âú®Êú¨Á§∫‰æã‰∏≠Ôºå‰∏§‰∏™Áõ∏ÂêåÁ±ªÂûã‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÈó¥ÈöîÈïøÂ∫¶‰∏∫ n = 2 ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåËÄåÊâßË°å‰∏Ä‰∏™‰ªªÂä°Âè™ÈúÄË¶Å‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåÊâÄ‰ª•‰∏≠Èó¥Âá∫Áé∞‰∫ÜÔºàÂæÖÂëΩÔºâÁä∂ÊÄÅ„ÄÇ 

 Á§∫‰æã 2Ôºö 

 
# ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 0
# ËæìÂá∫Ôºö6
Ëß£ÈáäÔºöÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºå‰ªª‰ΩïÂ§ßÂ∞è‰∏∫ 6 ÁöÑÊéíÂàóÈÉΩÂèØ‰ª•Êª°Ë∂≥Ë¶ÅÊ±ÇÔºåÂõ†‰∏∫ n = 0
["A","A","A","B","B","B"]
["A","B","A","B","A","B"]
["B","B","B","A","A","A"]
...
ËØ∏Â¶ÇÊ≠§Á±ª
 

 Á§∫‰æã 3Ôºö 

 
ËæìÂÖ•Ôºötasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
ËæìÂá∫Ôºö16
Ëß£ÈáäÔºö‰∏ÄÁßçÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºö
     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (ÂæÖÂëΩ) -> (ÂæÖÂëΩ) -> A -> (ÂæÖÂëΩ)
 -> (ÂæÖÂëΩ) -> A
 

 

 ÊèêÁ§∫Ôºö 

 
 1 <= task.length <= 10‚Å¥ 
 tasks[i] ÊòØÂ§ßÂÜôËã±ÊñáÂ≠óÊØç 
 n ÁöÑÂèñÂÄºËåÉÂõ¥‰∏∫ [0, 100] 
 

 Related Topics Ë¥™ÂøÉ Êï∞ÁªÑ ÂìàÂ∏åË°® ËÆ°Êï∞ ÊéíÂ∫è Â†ÜÔºà‰ºòÂÖàÈòüÂàóÔºâ üëç 1052 üëé 0

"""

from typing import *
from PythonLeetcodeRunner import *


# @lc code=start
# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        """
        Á≠ñÁï•, ‰ªéÂΩìÂâçÂÜ∑Âç¥ÂÆåÊàêÁöÑ‰ªªÂä°‰∏≠ÈÄâÊã©È¢ëÊ¨°ÊúÄÈ´òÁöÑÊâßË°å,
        ÂÆûÁé∞ÊñπÂºè: ÂÜ∑Âç¥ÁºìÂÜ≤Âå∫ + ‰ºòÂÖàÈòüÂàó
        ‰ºòÂåñÂêéÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶: m*log(m)
        """
        d = Counter(tasks)
        heap = []
        for k, freq in d.items():
            heapq.heappush(heap, (-freq, freq, k))

        # Áî®Â§ßÈ°∂Â†ÜÊØèÊ¨°Á≠õÈÄâÂá∫È¢ëÊ¨°ÊúÄÈ´òÁöÑÊâßË°å, Áõ∏ÂêåÈ¢ëÊ¨°ÈÄâÂèñ‰∏äÊ¨°‰∏ÄÊâßË°åÊó∂Èó¥Â∞èÁöÑ
        # Ëã•ÂÜ∑Âç¥‰∏çÊª°Ë∂≥, Á≠âÂæÖ
        cool = deque()
        t = 0
        cnt = 0  # ÊâßË°åÂÆåÊàêÁöÑ‰ªªÂä°Êï∞
        while cnt != len(d):
            # ‰ªéÂ†Ü‰∏≠ÈÄâÂá∫‰∏Ä‰∏™‰ªªÂä°ÊâßË°å
            if heap:
                _, freq, task = heapq.heappop(heap)
                # print(task)
                if freq > 1:
                    cool.append((t, 1 - freq, freq - 1, task))
                else:
                    cnt += 1

            # Â¶ÇÊûúÊúâ‰ªªÂä°ÂÜ∑Âç¥Êó∂Èó¥Âà∞‰∫Ü, ÂéãÂÖ•Â†Ü
            if cool and t - cool[0][0] >= n:
                heapq.heappush(heap, cool.popleft()[1:])

            # Ë∑≥ËøáÊ≤°ÊúâÂèØÊâßË°å‰ªªÂä°ÁöÑÊó∂Èó¥
            if not heap and cool:
                t = cool[0][0] + n
            else:
                t += 1

        return t


class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        """ Ë¥™ÂøÉÊûÑÈÄ†Ê≥ï """
        d = Counter(tasks)
        # k, cnt ÊòØÊúÄÂ§ß‰ªªÂä°‰∏™Êï∞ÂíåÂØπ‰∫éÁöÑÁßçÁ±ªÊï∞Èáè
        k, cnt = -inf, 0
        for v in d.values():
            if v > k:
                k, cnt = v, 1
            elif v == k:
                cnt += 1

        ans = max(cnt + (k - 1) * (n+1), len(tasks))
        return ans

# leetcode submit region end(Prohibit modification and deletion)
# @lc code=end

if __name__ == "__main__":
    TestObj = StartTest(question_content, Solution)
    TestObj.run_test()
