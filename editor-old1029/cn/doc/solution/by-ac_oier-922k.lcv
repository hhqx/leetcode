## 模拟 + 乘法原理

这道题和 [907. 子数组的最小值之和](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247493485&idx=1&sn=c6d6ac25c171e2617c5a95173aa58825) 如出一辙，只不过无须考虑运用「单调栈」。

原问题为求所有子数组的唯一字符数量和，其可等价为求每个 $s[i]$ 对答案的贡献，即每个 $s[i]$ 可作为多少个子数组的唯一元素。

假定我们能预处理出两数组 `l` 和 `r` 分别代表 $s[i]$ 作为子数组唯一字符时，其所能到达的最远两端：
* `l[i] = a` 代表下标 $a$ 为 $s[i]$ 能够作为子数组唯一字符时的最远左边界，即为 $s[i]$ 左边第一个与 $s[i]$ 值相同的位置（若不存在，则为 $a = -1$）
* `r[i] = b` 代表跳表 $b$ 为 $s[i]$ 能够作为子数组唯一字符时的最远右边界，即为 $s[i]$ 右边第一个与 $s[i]$ 值相同的位置（若不存在，则为 $b = n$）

子数组左端点个数为 $(i - a)$ 个，右端点个数为 $(b - i)$ 个，根据乘法原理可知，子数组个数为两者乘积。

预处理 `l` 和 `r` 只需要使用遍历计数即可。

代码：

* []

```Java
class Solution {
    public int uniqueLetterString(String s) {
        char[] cs = s.toCharArray();
        int n = cs.length, ans = 0;
        int[] l = new int[n], r = new int[n];
        int[] cnts = new int[26];
        Arrays.fill(cnts, -1);
        for (int i = 0; i < n; i++) {
            int u = cs[i] - 'A';
            l[i] = cnts[u];
            cnts[u] = i;
        }
        Arrays.fill(cnts, n);
        for (int i = n - 1; i >= 0; i--) {
            int u = cs[i] - 'A';
            r[i] = cnts[u];
            cnts[u] = i;
        }
        for (int i = 0; i < n; i++) ans += (i - l[i]) * (r[i] - i);
        return ans;
    }
}
```

* []

```Typescript
function uniqueLetterString(s: string): number {
    let n = s.length, ans = 0
    const l = new Array<number>(n), r = new Array<number>(n)
    const cnts = new Array<number>(26).fill(-1)
    for (let i = 0; i < n; i++) {
        const u = s.charCodeAt(i) - 65
        l[i] = cnts[u]
        cnts[u] = i
    }
    cnts.fill(n)
    for (let i = n - 1; i >= 0; i--) {
        const u = s.charCodeAt(i) - 65
        r[i] = cnts[u]
        cnts[u] = i
    }
    for (let i = 0; i < n; i++) ans += (i - l[i]) * (r[i] - i)
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 加餐

**加餐一道与本题十分类似（需结合单调栈且考虑重复问题）的中等题 : [907. 子数组的最小值之和](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247493485&idx=1&sn=c6d6ac25c171e2617c5a95173aa58825) 🎉🎉**

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
