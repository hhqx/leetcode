class LinkNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class MyLinkedList:

    def __init__(self):
        self.head = LinkNode()

    def get(self, index: int) -> int:
        if index < 0:
            return -1
        
        node = self.head.next
        for _ in range(index):
            if node is None:
                return -1
            node = node.next
        return node.val if node else -1

    def addAtHead(self, val: int) -> None:
        self.head.next = LinkNode(val, self.head.next)

    def addAtTail(self, val: int) -> None:
        node = self.head
        while node.next is not None:
            node = node.next
        node.next = LinkNode(val)
        return

    def addAtIndex(self, index: int, val: int) -> None:

        node = self.head
        for _ in range(index):
            if node.next is None:
                return 
            node = node.next
        node.next = LinkNode(val, node.next)

    def deleteAtIndex(self, index: int) -> None:
        if index < 0:
            return
        node = self.head
        for _ in range(index):
            if node.next is None:
                return 
            node = node.next
        if node.next is not None:
            node.next = node.next.next


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
# runtime:184 ms
# memory:15.7 MB
