### 解题思路

#### 暴力解法

寻找所有的子字符串，计算每个子字符串的唯一字符数，然后再值逐一累加，时间复杂度大约为 $O(n\cdot 2^n)$。

#### 动态规划

设 $A[i]$ 表示前 $i$ 个字符的计算结果，$B[i]$ 表示以 $s[i]$ 为结尾的所有子字符串的唯一字符数，易得递归关系：
$A[i]=A[i-1]+B[i]$

接下来，需要找出 $B[i]$ 的计算公式。
可以发现 $B[i]$ 与  $B[i-1$ 存在递推关系。
例如，在 $s="ABC"$ 中，以 $s[1]="B"$ 为结尾的子字符串分别为 $\{B,AB\}$，以 $s[2]="C"$ 为结尾的子字符串为 $\{C,BC,ABC\}$，这里 $B[2]=B[1]+3$

现在对 $B[i]$ 的计算公式进行推导：
假设前 $i-1$ 个字符串为 $A##A##A##$，前 $i$ 个字符串为 $A##A##A##A$，其中 $#$ 是任意的非 $A$ 元素。

可以发现所有以 $s[i]$ 为结尾的子字符串其实就是在以 $s[i-1$ 为结尾的字符串末端添加一个 $s[i]$，进一步可以发现：
- 若以$s[i-1]$为结尾的字符串中不含 $A$，则尾部加入 $s[i]$ 以后，该字符串的值加1
- 若以$s[i-1]$为结尾字符串中含有一个 $A$，则尾部加入 $s[i]$ 以后，$A$ 不再是独一无二的符号，该字符串的值减1
- 若以$s[i-1]$为结尾字符串中含有两个包括以上的 $A$，则尾部加入 $s[i]$ 以后，子字符串的值不变。

假设在位置 $i$ 之前最近的两个 $A$ 的位置分别为 $pos1$、 $pos2$ （若不存在，都可以设为-1 ，$pos1>=pos2$），则
- 能让值加1的子字符串一共有 $i-pos1$ 个，其中包括单独的 $s[i]$。
- 能让值减1的子字符串一共有 $pos1-pos2$ 个，
- 值不变的子字符串一共有 $pos1$ 个。

因此可以得到 $B[i]$ 的实际计算公式：
$B[i] = B[i-1]+(i-pos1)-(pos1-pos2)=B[i-1]+i-2*pos1+pos2$

动态规划的时间复杂度为 $O(n)$，空间复杂度为 $O(1)$。

### 代码

* cpp

```cpp
class Solution {
public:
    int MOD = 1000000007;
    int uniqueLetterString(string s) {
        vector<pair<int, int>> position(26, make_pair(-1, -1)); //用于记录字符出现的最近两个位置，即pos1,pos2
        int dpA = 0, dpB = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            int p = s[i] - 'A';
            dpB += (i - 2 * position[p].first + position[p].second);
            dpA += dpB;
            position[p].second = position[p].first;
            position[p].first = i;
            dpA %= MOD;
            dpB %= MOD;
        }
        return dpA;
    }
};
```

